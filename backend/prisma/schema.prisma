// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  emailVerified DateTime?
  phone     String?  @unique
  address   String?
  introduction String? @default("Hi there, welcome to my profile!")
  birthDate DateTime?
  avatar    String?  @default("https://example.com/default-avatar.png")
  role      String   @default("USER") // STAFF, ADMIN, USER
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  posts     Post[]

  comments  Comment[]

  likes     like[]

  BookingTable BookingTable[]

  Notification Notification[]

  conversationsAsA Conversation[] @relation("ConvUserA")
  conversationsAsB Conversation[] @relation("ConvUserB")
  messages   Message[]
  notifications2 Notification2[]
}

model Post {
  id        String   @id @default(cuid())
  problem   String
  description String
  location  String
  title     String
  content   String?
  published Boolean  @default(false)
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Comment Comment[]

  like like[]
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  imageUrl  String?
  postId    String
  post      Post     @relation(fields: [postId], references: [id])
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model like {
  id        String   @id @default(cuid())
  postId    String
  post      Post     @relation(fields: [postId], references: [id])
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model waterData {
  id          String   @id @default(cuid())
  period      DateTime
  total       Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ElectricityData {
  id          String   @id @default(cuid())
  period      DateTime
  total       Float
  low         Float
  medium      Float
  high        Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model PollutionData {
  id          String   @id @default(cuid())
  period      DateTime
  temperature Float @default(21.0)
  humidity    Float @default(50.0)
  nh3         Float @default(0.0)
  no2         Float
  co          Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Room {
  id          String   @id @default(cuid())
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tables     Table[]
}

model Table {
  id          String   @id @default(cuid())
  name        String
  type        String   @default("TABLE") // TABLE, DESK, BOOTH...
  roomId      String
  room        Room     @relation(fields: [roomId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  bookingTable  BookingTable[]
  devices       Device[]
}

model BookingTable {
  id          String   @id @default(cuid())
  tableId     String
  table       Table    @relation(fields: [tableId], references: [id])
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  slotId	    Int
  dateYMD     String
  startTime   DateTime
  endTime     DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([tableId, startTime, endTime])
}

model Device {
  id          String   @id @default(cuid())
  name        String
  type        String   // e.g., "sensor", "actuator"
  imageUrl    String?
  tableId     String
  status      String   @default("BORROW") // BORROW, RETURN, REPAIR
  table       Table    @relation(fields: [tableId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Notification {
  id            String   @id @default(cuid())
  title         String
  content       String
  isRead        Boolean  @default(false)
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  // ↓↓↓ thêm mới
  type          String   // "BOOKING_REMINDER_15M" | "BOOKING_START" | "POST_NEW"
  refId         String?  // bookingId hoặc postId
  scheduledFor  DateTime?

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([userId, isRead, createdAt])
  @@unique([userId, type, refId, scheduledFor])
}

enum NotificationType {
  NEW_MESSAGE
}

model Conversation {
  id             String   @id @default(cuid())
  // Khóa duy nhất cho cặp người dùng; dạng: "<A>#<B>" với A<B (app đảm bảo)
  participantKey String   @unique
  userAId        String
  userBId        String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  lastMessageAt  DateTime?

  userA          User     @relation("ConvUserA", fields: [userAId], references: [id], onDelete: Cascade)
  userB          User     @relation("ConvUserB", fields: [userBId], references: [id], onDelete: Cascade)
  messages       Message[]

  @@index([userAId])
  @@index([userBId])
  @@index([lastMessageAt])
}

model Message {
  id             String       @id @default(cuid())
  conversationId String
  senderId       String
  content        String?
  attachments    Json?
  createdAt      DateTime     @default(now())

  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender         User         @relation(fields: [senderId], references: [id], onDelete: Cascade)

  @@index([conversationId, createdAt])
}

model Notification2 {
  id             String           @id @default(cuid())
  userId         String           // người nhận
  type           NotificationType
  title          String
  body           String
  conversationId String?
  messageId      String?
  createdAt      DateTime         @default(now())
  readAt         DateTime?

  user           User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([conversationId])
}
